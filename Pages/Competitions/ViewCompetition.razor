@page "/competitions/view/{Id:guid}"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR.Client;
@using SportsRaffles.Data.Models;
@using SportsRaffles.Services;
@using SportsRaffles.ViewModels;
@inject AuthenticationStateProvider authProvider
@inject SignInManager<User> _signInManager
@inject NavigationManager navigationManager
@inject CompetitionService competitionService
@inject IJSRuntime jsRuntime
<style>

.view-container{
    display: flex;
    flex-direction: row;
    justify-content: center;
    vertical-align: top;
    margin-bottom: auto;
}

.left-view{
    display: flex;
    flex-direction: column;
    justify-content: start;
    margin: 10px 10px;
    width: 50vw;
    
}

.right-view {
    display: flex;
    flex-direction: column;
    justify-content: start;
    margin: 10px 10px;
    width: 30vw;
    height: 50vh;
}

.view-box{
    border-radius: 5px;
        max-width: 70%;
        min-height: 70%;
        justify-content: center;
        display: flex;
}

.view-image{
    object-fit: fill;
    width: 100%;
height: 100%;   
}
</style>

<div class="view-container">
    <div class="left-view">
        <h3 class="mt-3">@prizeToShow.Name</h3>

        <div class="mx-2" style="display: flex; justify-content: start;">
            <span style="font-size: 20px;">£</span> <span class="mt-1 ms-1">@comps.CostPerTicket.ToString("0.00")</span>
        </div>

        <div class="progress mt-3" role="progressbar" aria-label="Warning example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar bg-warning text-dark" style="width: @percentageSold%">@(100-percentageSold)% Remaining</div>
        </div>

        <div class="my-2 mx-2" style="display: flex; flex-direction: row; justify-content: start;">
            <i class="bi bi-ticket-fill"></i>
            <span class="mx-2">Tickets Sold:</span>
            <span class="ms-2 text-warning">@ticketsSold</span>
            <span class="me-2">/@comps.MaxTickets</span>
        </div>

        <div class="my-2 mx-2"style="display: flex; justify-content: space-between;">
            <div style="display: flex; justify-content: start;">
                <i class="bi bi-trophy-fill"></i>
                <span class="ms-2 fw-bold">1</span>
                <span class="mx-2">Winner(s)</span>
            </div>
            <div style="display: flex; justify-content: end;">
                <i class="bi bi-person-fill"></i>
                <span class="mx-1 fw-bold">@comps.MaxTicketsPerUser</span>
                <span class="me-2">entries maximum per person</span>
            </div>
        </div>

        <h5 class="my-2 text-center" style="border-radius: 5px; opacity: 70%;">Draw @(comps.EndDate?.ToString("f") ?? DateTime.UtcNow.ToString("f"))</h5>

        <div class="my-2 mx-2 input-group" style="display: flex; flex-direction: row; justify-content: center; width: 50%; align-self: center;">
            <InputNumber class="form-control" @bind-Value="NumberOfTickets" id="ticketSelector" on min="1" max="200" @oninput="CalculateTicketCost" />
            <button class="btn btn-outline-warning" id="addToCartBtn"><i class="bi bi-cart-fill me-1"></i>Add to cart | £@(SelectedTicketCost.ToString("0.00"))</button>
        </div>

        <div class="accordion mt-auto" id="accordionFlushExample">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                        Prize Details
                    </button>
                </h2>
                <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
                    <div class="accordion-body">@comps.Description <br /> @prizeToShow.Description</div>
                </div>
            </div>
        </div>
    </div>
    <div class="right-view">
        <div id="carouselView" class="carousel carousel-fade view-box">
            <div class="carousel-indicators">
                @foreach (var prize in comps.Prizes)
                {
                    var prizeIndex = comps.Prizes.IndexOf(prize);
                    <button type="button" data-bs-target="#carouselView" data-bs-slide-to="@prizeIndex" class="active" aria-current="true" aria-label="Slide @(prizeIndex+1)"></button>
                }
            </div>
            <div class="carousel-inner">
                @foreach (var prize in comps.Prizes)
                {
                    var prizeIndex = comps.Prizes.IndexOf(prize);
                    <div class="carousel-item @(prizeIndex == 0 ? "active" : "")">
                        <img src="@($"data:image/png;base64,{prize.ImageUrl}")" class="d-block mx-auto view-image @(prizeIndex == 0 ? "active" : "")" referrerpolicy="noreferrer">
                    </div>

                };
            </div>
            @if(comps.Prizes.Count > 1)
            {
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselView" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselView" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            }
        </div>
    </div>
</div>

@code
{
    [Parameter]public Guid Id { get; set; }

    private CompetitionViewModel comps = new CompetitionViewModel();
    private List<PrizeViewModel> prizes = new List<PrizeViewModel>();
    private PrizeViewModel prizeToShow = new PrizeViewModel();

    private RenderFragment? PrizeImages;

    public int NumberOfTickets { get; set; } 
    public float SelectedTicketCost { get; set; } = 0;
    private int ticketsSold { get; set; }
    private float percentageSold { get; set; }

    protected override async Task OnInitializedAsync()
    {

        comps = await competitionService.GetCompetitionViewModel(Id);

        prizes = comps.Prizes;

        if (prizes.Any())
        {

            prizeToShow = prizes.FirstOrDefault();
            ticketsSold = competitionService.GetEntriesForCompetition(Id);
            percentageSold = ticketsSold / comps.MaxTickets;
        }

    }

    private void CalculateTicketCost(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int inputValue))
        {
            SelectedTicketCost = inputValue * comps.CostPerTicket;

        }
        else
        {
            SelectedTicketCost = 0;
        }
        StateHasChanged();
    }

}